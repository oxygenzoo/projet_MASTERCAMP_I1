# Generated by Django 5.2.3 on 2025-07-01 06:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Mairie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(help_text='Nom de la ville', max_length=100, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='mairies_logos/')),
                ('nb_poubelles', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('seuil_alertes', models.IntegerField(default=10, help_text='Seuil pour déclencher les alertes', validators=[django.core.validators.MinValueValidator(1)])),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Mairie',
                'verbose_name_plural': 'Mairies',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('ville', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Poubelle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('etat', models.CharField(choices=[('pleine', 'Pleine'), ('vide', 'Vide'), ('partiellement_pleine', 'Partiellement pleine')], max_length=20)),
                ('photo', models.ImageField(upload_to='poubelles/')),
                ('date_ajout', models.DateTimeField(auto_now_add=True)),
                ('date_vidage', models.DateTimeField(blank=True, null=True)),
                ('adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('quartier', models.CharField(blank=True, max_length=100, null=True)),
                ('cree_par', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='poubelles_creees', to=settings.AUTH_USER_MODEL)),
                ('mairie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='poubelles', to='api.mairie')),
            ],
            options={
                'verbose_name': 'Poubelle',
                'verbose_name_plural': 'Poubelles',
                'ordering': ['-date_ajout'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='uploads/')),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('annotation', models.CharField(blank=True, choices=[('pleine', 'Pleine'), ('vide', 'Vide')], max_length=10, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('metadata', models.JSONField(blank=True, help_text="Stocke les caractéristiques extraites de l'image", null=True)),
                ('classification_auto', models.CharField(blank=True, choices=[('pleine', 'Pleine'), ('vide', 'Vide')], help_text='Classification automatique basée sur les règles', max_length=10, null=True)),
                ('taille_fichier', models.IntegerField(blank=True, help_text='Taille du fichier en octets', null=True)),
                ('dimensions', models.CharField(blank=True, help_text="Dimensions de l'image (ex: 800x600)", max_length=50, null=True)),
                ('couleur_moyenne', models.CharField(blank=True, help_text="Couleur moyenne de l'image (RGB)", max_length=20, null=True)),
                ('contraste', models.FloatField(blank=True, help_text="Valeur du contraste de l'image", null=True)),
                ('quartier', models.CharField(blank=True, max_length=100, null=True)),
                ('jour_semaine', models.CharField(blank=True, max_length=10, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images_uploadees', to=settings.AUTH_USER_MODEL)),
                ('poubelle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='api.poubelle')),
            ],
            options={
                'verbose_name': 'Image de poubelle',
                'verbose_name_plural': 'Images de poubelles',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='HistoriquePoints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('type', models.CharField(choices=[('pleine', 'Poubelle pleine (+10 points)'), ('vide', 'Poubelle vide (+5 points)'), ('bonus', 'Bonus spécial'), ('malus', 'Malus/correction')], max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historique_points', to=settings.AUTH_USER_MODEL)),
                ('poubelle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='historique_points', to='api.poubelle')),
            ],
            options={
                'verbose_name': 'Historique des points',
                'verbose_name_plural': 'Historique des points',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ClassementUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('date', models.DateField(auto_now_add=True)),
                ('rang', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Classement des utilisateurs',
                'verbose_name_plural': 'Classements des utilisateurs',
                'ordering': ['-points', 'date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='ClassementMairies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('date', models.DateField(auto_now_add=True)),
                ('rang', models.IntegerField(blank=True, null=True)),
                ('mairie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classements', to='api.mairie')),
            ],
            options={
                'verbose_name': 'Classement des mairies',
                'verbose_name_plural': 'Classements des mairies',
                'ordering': ['-points', 'date'],
                'unique_together': {('mairie', 'date')},
            },
        ),
    ]
